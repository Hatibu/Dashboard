{"ast":null,"code":"import { db } from \"../firebase\";\nimport { doc, deleteDoc, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nexport const newPurchases = async (data, r) => {\n  const purchase_name = data.p_name;\n  const unit = data.unit_bought;\n  const description = data.p_descr;\n  const price = data.price;\n  const paid = data.paid;\n  const purchases_data = {\n    purchase_name,\n    unit,\n    description,\n    price,\n    paid,\n    timestamp: serverTimestamp()\n  };\n  const store_usage = {\n    purchase_name,\n    unit,\n    timestamp: serverTimestamp()\n  };\n\n  try {\n    const collectionRef = collection(db, \"purchases\");\n    await addDoc(collectionRef, purchases_data);\n    alert(\"Registration successfully\");\n    r.target.reset();\n  } catch (err) {\n    console.log(err);\n  }\n\n  try {\n    const collectionRef = collection(db, \"storeUsage\");\n    await addDoc(collectionRef, store_usage);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const handleDelete = async id => {\n  const docRef = doc(db, \"purchases\", id);\n  const r = window.confirm(\"Press a button!\");\n\n  if (r === true) {\n    await deleteDoc(docRef);\n  }\n}; // logics for store operations\n\nexport const newStore = async (data, r) => {\n  const pers_name = data.pers_name;\n  const product_type = data.product_type;\n  const quantity = data.quantity;\n  const Time = data.Time;\n  const store_data = {\n    pers_name,\n    product_type,\n    quantity,\n    Time,\n    timestamp: serverTimestamp()\n  };\n\n  try {\n    console.log(store_data); // const collectionRef = collection(db, \"stores\");\n    // await addDoc(collectionRef, store_data);\n    // alert(\"Registration successfully\");\n    // r.target.reset();\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/home/julius/Documents/Projects/inventory/src/components/utils.js"],"names":["db","doc","deleteDoc","collection","addDoc","serverTimestamp","newPurchases","data","r","purchase_name","p_name","unit","unit_bought","description","p_descr","price","paid","purchases_data","timestamp","store_usage","collectionRef","alert","target","reset","err","console","log","handleDelete","id","docRef","window","confirm","newStore","pers_name","product_type","quantity","Time","store_data"],"mappings":"AAAA,SAAQA,EAAR,QAAkB,aAAlB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,UAAzB,EAAoCC,MAApC,EAA4CC,eAA5C,QAAmE,oBAAnE;AAEA,OAAO,MAAMC,YAAY,GAAG,OAAOC,IAAP,EAAaC,CAAb,KAAkB;AAC1C,QAAMC,aAAa,GAAGF,IAAI,CAACG,MAA3B;AACA,QAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAlB;AACA,QAAMC,WAAW,GAAGN,IAAI,CAACO,OAAzB;AACA,QAAMC,KAAK,GAAGR,IAAI,CAACQ,KAAnB;AACA,QAAMC,IAAI,GAAGT,IAAI,CAACS,IAAlB;AACA,QAAMC,cAAc,GAAG;AAACR,IAAAA,aAAD;AAAgBE,IAAAA,IAAhB;AAAsBE,IAAAA,WAAtB;AAAmCE,IAAAA,KAAnC;AAA0CC,IAAAA,IAA1C;AAAgDE,IAAAA,SAAS,EAAEb,eAAe;AAA1E,GAAvB;AACA,QAAMc,WAAW,GAAG;AAACV,IAAAA,aAAD;AAAeE,IAAAA,IAAf;AAAqBO,IAAAA,SAAS,EAAEb,eAAe;AAA/C,GAApB;;AAEA,MAAG;AACF,UAAMe,aAAa,GAAGjB,UAAU,CAACH,EAAD,EAAK,WAAL,CAAhC;AACA,UAAMI,MAAM,CAACgB,aAAD,EAAgBH,cAAhB,CAAZ;AACAI,IAAAA,KAAK,CAAC,2BAAD,CAAL;AACAb,IAAAA,CAAC,CAACc,MAAF,CAASC,KAAT;AACA,GALD,CAKC,OAAMC,GAAN,EAAU;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACF,MAAG;AACF,UAAMJ,aAAa,GAAGjB,UAAU,CAACH,EAAD,EAAK,YAAL,CAAhC;AACA,UAAMI,MAAM,CAACgB,aAAD,EAAgBD,WAAhB,CAAZ;AACA,GAHD,CAGC,OAAMK,GAAN,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AAED,CAxBI;AA0BP,OAAO,MAAMG,YAAY,GAAG,MAAOC,EAAP,IAAa;AACrC,QAAMC,MAAM,GAAG5B,GAAG,CAACD,EAAD,EAAK,WAAL,EAAkB4B,EAAlB,CAAlB;AACD,QAAMpB,CAAC,GAAGsB,MAAM,CAACC,OAAP,CAAe,iBAAf,CAAV;;AACA,MAAIvB,CAAC,KAAK,IAAV,EAAe;AACd,UAAMN,SAAS,CAAC2B,MAAD,CAAf;AACA;AAGH,CARM,C,CAUP;;AACA,OAAO,MAAMG,QAAQ,GAAG,OAAOzB,IAAP,EAAYC,CAAZ,KAAiB;AACrC,QAAMyB,SAAS,GAAG1B,IAAI,CAAC0B,SAAvB;AACA,QAAMC,YAAY,GAAG3B,IAAI,CAAC2B,YAA1B;AACA,QAAMC,QAAQ,GAAG5B,IAAI,CAAC4B,QAAtB;AACA,QAAMC,IAAI,GAAG7B,IAAI,CAAC6B,IAAlB;AACA,QAAMC,UAAU,GAAG;AAAEJ,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA,IAArC;AAA2ClB,IAAAA,SAAS,EAAEb,eAAe;AAArE,GAAnB;;AAEF,MAAG;AACDoB,IAAAA,OAAO,CAACC,GAAR,CAAYW,UAAZ,EADC,CAED;AACA;AACA;AACA;AACA,GANF,CAME,OAAMb,GAAN,EAAU;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AAEH,CAjBM","sourcesContent":["import {db } from \"../firebase\";\nimport { doc, deleteDoc, collection,addDoc, serverTimestamp } from \"firebase/firestore\";\n\nexport const newPurchases = async (data, r) =>{\n    const purchase_name = data.p_name;\n    const unit = data.unit_bought;\n    const description = data.p_descr;\n    const price = data.price;\n    const paid = data.paid;\n    const purchases_data = {purchase_name, unit, description, price, paid, timestamp: serverTimestamp()}\n    const store_usage = {purchase_name,unit, timestamp: serverTimestamp()}\n  \n    try{\n     const collectionRef = collection(db, \"purchases\");\n     await addDoc(collectionRef, purchases_data);\n     alert(\"Registration successfully\");\n     r.target.reset();\n    }catch(err){\n      console.log(err);\n    }\n   try{\n    const collectionRef = collection(db, \"storeUsage\");\n    await addDoc(collectionRef, store_usage);\n   }catch(err){\n    console.log(err);\n   }\n \n  };\n\nexport const handleDelete = async (id) =>{\n    const docRef = doc(db, \"purchases\", id);\n   const r = window.confirm(\"Press a button!\");\n   if (r === true){\n    await deleteDoc(docRef);\n   }\n   \n\n}\n\n// logics for store operations\nexport const newStore = async (data,r) =>{\n    const pers_name = data.pers_name;\n    const product_type = data.product_type;\n    const quantity = data.quantity;\n    const Time = data.Time;\n    const store_data = { pers_name, product_type, quantity, Time, timestamp: serverTimestamp()}\n    \n  try{\n    console.log(store_data)\n    // const collectionRef = collection(db, \"stores\");\n    // await addDoc(collectionRef, store_data);\n    // alert(\"Registration successfully\");\n    // r.target.reset();\n   }catch(err){\n     console.log(err);\n   }\n\n}"]},"metadata":{},"sourceType":"module"}