{"ast":null,"code":"var _jsxFileName = \"/home/julius/Documents/Projects/inventory/src/auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { signInWithEmailAndPassword, auth, onAuthStateChanged, signOut } from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext(); // provider that enclose your app for access of auth to all components\n\nexport function ProvideAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    signInWithEmailAndPassword(auth, email, password).then(response => {\n      setUser(response.user);\n      alert(`logged in as : ${response.user.email}`);\n      return response.user;\n    }).catch(error => {\n      const errorMessage = JSON.stringify(error.message);\n      const problem = errorMessage.slice(23, errorMessage.length - 3);\n      alert(`Can not log in because: ${problem}`);\n    });\n  };\n\n  const signout = () => {\n    return signOut(auth).then(() => {\n      setUser(false);\n    });\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    signin,\n    signout\n  };\n}\n\n_s3(useProvideAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["/home/julius/Documents/Projects/inventory/src/auth.js"],"names":["React","useState","useEffect","useContext","createContext","signInWithEmailAndPassword","auth","onAuthStateChanged","signOut","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","signin","email","password","then","response","alert","catch","error","errorMessage","JSON","stringify","message","problem","slice","length","signout","unsubscribe"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,SACEC,0BADF,EAEEC,IAFF,EAGEC,kBAHF,EAIEC,OAJF,QAKO,YALP;;AAOA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC,C,CAEA;;AACA,OAAO,SAASM,WAAT,OAAmC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACxC,QAAML,IAAI,GAAGM,cAAc,EAA3B;AACA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEN,IAA7B;AAAA,cAAoCK;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;;GANgBD,W;UACDE,c;;;KADCF,W;AAOhB,OAAO,MAAMG,OAAO,GAAG,MAAM;AAAA;;AAC3B,SAAOV,UAAU,CAACM,WAAD,CAAjB;AACD,CAFM,C,CAIP;;IAJaI,O;;AAKb,SAASD,cAAT,GAA0B;AAAA;;AACxB,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMe,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClCb,IAAAA,0BAA0B,CAACC,IAAD,EAAOW,KAAP,EAAcC,QAAd,CAA1B,CACGC,IADH,CACSC,QAAD,IAAc;AAClBL,MAAAA,OAAO,CAACK,QAAQ,CAACN,IAAV,CAAP;AACAO,MAAAA,KAAK,CAAE,kBAAiBD,QAAQ,CAACN,IAAT,CAAcG,KAAM,EAAvC,CAAL;AACA,aAAOG,QAAQ,CAACN,IAAhB;AACD,KALH,EAMGQ,KANH,CAMUC,KAAD,IAAW;AAChB,YAAMC,YAAY,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAK,CAACI,OAArB,CAArB;AACA,YAAMC,OAAO,GAAGJ,YAAY,CAACK,KAAb,CAAmB,EAAnB,EAAuBL,YAAY,CAACM,MAAb,GAAsB,CAA7C,CAAhB;AACAT,MAAAA,KAAK,CAAE,2BAA0BO,OAAQ,EAApC,CAAL;AACD,KAVH;AAWD,GAZD;;AAcA,QAAMG,OAAO,GAAG,MAAM;AACpB,WAAOvB,OAAO,CAACF,IAAD,CAAP,CAAca,IAAd,CAAmB,MAAM;AAC9BJ,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAFM,CAAP;AAGD,GAJD,CAjBwB,CAuBxB;AACA;AACA;AACA;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,WAAW,GAAGzB,kBAAkB,CAACD,IAAD,EAAQQ,IAAD,IAAU;AACrD,UAAIA,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KANqC,CAAtC,CADc,CAQd;;AACA,WAAO,MAAMiB,WAAW,EAAxB;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO;AACLlB,IAAAA,IADK;AAELE,IAAAA,MAFK;AAGLe,IAAAA;AAHK,GAAP;AAKD;;IA5CQnB,c","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport {\n  signInWithEmailAndPassword,\n  auth,\n  onAuthStateChanged,\n  signOut,\n} from \"./firebase\";\n\nconst authContext = createContext();\n\n// provider that enclose your app for access of auth to all components\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    signInWithEmailAndPassword(auth, email, password)\n      .then((response) => {\n        setUser(response.user);\n        alert(`logged in as : ${response.user.email}`);\n        return response.user;\n      })\n      .catch((error) => {\n        const errorMessage = JSON.stringify(error.message);\n        const problem = errorMessage.slice(23, errorMessage.length - 3);\n        alert(`Can not log in because: ${problem}`);\n      });\n  };\n\n  const signout = () => {\n    return signOut(auth).then(() => {\n      setUser(false);\n    });\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    signin,\n    signout,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}